{"version":3,"file":"index.js","sources":["../../../../../src/components/hds/form/character-count/index.hbs","../../../../../src/components/hds/form/character-count/index.js"],"sourcesContent":["import { precompileTemplate } from \"@ember/template-compilation\";\nexport default precompileTemplate(\"{{!\\n  Copyright (c) HashiCorp, Inc.\\n  SPDX-License-Identifier: MPL-2.0\\n}}\\n<Hds::Text::Body\\n  @tag=\\\"div\\\"\\n  @size=\\\"100\\\"\\n  class={{this.classNames}}\\n  id={{this.id}}\\n  {{did-insert this.onInsert}}\\n  {{will-destroy this.willDestroyNode}}\\n  ...attributes\\n  aria-live=\\\"polite\\\"\\n>\\n  {{#if (has-block)}}\\n    {{yield\\n      (hash\\n        minLength=this.minLength\\n        maxLength=this.maxLength\\n        currentLength=this.currentLength\\n        remaining=this.remaining\\n        shortfall=this.shortfall\\n      )\\n    }}\\n  {{else}}\\n    {{this.message}}\\n  {{/if}}\\n</Hds::Text::Body>\")","/**\n * Copyright (c) HashiCorp, Inc.\n * SPDX-License-Identifier: MPL-2.0\n */\n\nimport Component from '@glimmer/component';\nimport { tracked } from '@glimmer/tracking';\nimport { action } from '@ember/object';\n\nconst ID_PREFIX = 'character-count-';\nconst NOOP = () => {};\n\nexport default class HdsFormCharacterCountIndexComponent extends Component {\n  // The current number of characters in the associated input\n  @tracked currentLength;\n  inputControl = document.getElementById(this.args.controlId);\n\n  // Inflector utility function to determine plural or singular for 'character' noun\n  pluralize(count, prefix = '', noun = 'character', suffix = 's') {\n    return `${count}${prefix ? ' ' + prefix : ''} ${noun}${\n      count !== 1 ? suffix : ''\n    }`;\n  }\n\n  /**\n   * @param maxLength\n   * @type {number}\n   * @default null\n   * @description The maximum number of characters allowed.\n   */\n  get maxLength() {\n    let { maxLength } = this.args;\n    return parseInt(maxLength);\n  }\n\n  /**\n   * @param minLength\n   * @type {number}\n   * @default null\n   * @description The minimum number of characters allowed.\n   */\n  get minLength() {\n    let { minLength } = this.args;\n    return parseInt(minLength);\n  }\n\n  /**\n   * @param remaining\n   * @type {number}\n   * @default null\n   * @description The remaining number of characters.\n   */\n  get remaining() {\n    return this.maxLength - this.currentLength;\n  }\n\n  /**\n   * @param shortfall\n   * @type {number}\n   * @default null\n   * @description The number of characters the content is falling short of.\n   */\n  get shortfall() {\n    return this.minLength - this.currentLength;\n  }\n\n  /**\n   * @param message\n   * @type {string}\n   * @default null\n   * @description The character count message presented to users\n   */\n  get message() {\n    let messageText = '';\n    if (this.minLength && this.currentLength === 0) {\n      messageText = `${this.pluralize(this.minLength)} required`;\n    } else if (this.minLength && this.currentLength < this.minLength) {\n      messageText = `${this.pluralize(this.shortfall, 'more')} required`;\n    } else if (this.maxLength && this.currentLength === 0) {\n      messageText = `${this.pluralize(this.maxLength)} allowed`;\n    } else if (this.maxLength && this.currentLength <= this.maxLength) {\n      messageText = `${this.pluralize(this.remaining)} remaining`;\n    } else if (this.currentLength > this.maxLength) {\n      messageText = `Exceeded by ${this.pluralize(-this.remaining)}`;\n    } else {\n      messageText = `${this.pluralize(this.currentLength)} entered`;\n    }\n    return messageText;\n  }\n\n  /**\n   * Determines the unique ID to assign to the element\n   * @method id\n   * @return {(string|null)} The \"id\" attribute to apply to the element or null, if no controlId is provided\n   */\n  get id() {\n    let { controlId } = this.args;\n    if (controlId) {\n      return `${ID_PREFIX}${controlId}`;\n    }\n    return null;\n  }\n\n  /**\n   * @param onInsert\n   * @type {function}\n   * @default () => {}\n   */\n  get onInsert() {\n    let { onInsert } = this.args;\n\n    if (!this.inputControl || this.inputControl.value === undefined) {\n      console.error(\n        '`Hds::Form::CharacterCount` component - `@controlId` selector provided does not point to a valid input element, check the id',\n        this.args.controlId\n      );\n    } else {\n      this.updateCurrentLength();\n      this.inputControl.addEventListener(\n        'input',\n        this.updateCurrentLength,\n        true\n      );\n    }\n\n    // notice: this is a guard used to prevent triggering an error when the component is used as standalone element\n    if (typeof onInsert === 'function') {\n      return onInsert;\n    } else {\n      return NOOP;\n    }\n  }\n\n  @action\n  willDestroyNode() {\n    if (this.inputControl) {\n      this.inputControl.removeEventListener(\n        'input',\n        this.updateCurrentLength,\n        true\n      );\n    }\n  }\n\n  @action\n  updateCurrentLength() {\n    this.currentLength = this.inputControl?.value?.length;\n\n    if (typeof this.args.onInput === 'function') {\n      this.args.onInput({\n        inputControl: this.inputControl,\n        currentLength: this.currentLength,\n        maxLength: this.maxLength,\n        minLength: this.minLength,\n        remaining: this.remaining,\n        shortfall: this.shortfall,\n      });\n    }\n  }\n\n  /**\n   * Get the class names to apply to the component.\n   * @method classNames\n   * @return {string} The \"class\" attribute to apply to the component.\n   */\n  get classNames() {\n    let classes = ['hds-form-character-count'];\n\n    // add a class based on the @contextualClass argument\n    // notice: this will *not* be documented for public use\n    // the reason for this is that the contextual component declarations don't pass attributes to the component\n    if (this.args.contextualClass) {\n      classes.push(this.args.contextualClass);\n    }\n\n    return classes.join(' ');\n  }\n}\n"],"names":["ID_PREFIX","NOOP","HdsFormCharacterCountIndexComponent","_class","Component","constructor","args","_initializerDefineProperty","_descriptor","_defineProperty","document","getElementById","controlId","pluralize","count","prefix","noun","suffix","maxLength","parseInt","minLength","remaining","currentLength","shortfall","message","messageText","id","onInsert","inputControl","value","undefined","console","error","updateCurrentLength","addEventListener","willDestroyNode","removeEventListener","length","onInput","classNames","classes","contextualClass","push","join","_applyDecoratedDescriptor","prototype","tracked","configurable","enumerable","writable","initializer","action","Object","getOwnPropertyDescriptor","setComponentTemplate","TEMPLATE"],"mappings":"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"}