{"version":3,"file":"hds-clipboard.js","sources":["../../src/modifiers/hds-clipboard.js"],"sourcesContent":["/**\n * Copyright (c) HashiCorp, Inc.\n * SPDX-License-Identifier: MPL-2.0\n */\n\nimport { modifier } from 'ember-modifier';\nimport { assert, warn } from '@ember/debug';\n\nexport const getTextToCopy = (text) => {\n  let textToCopy;\n\n  if (text) {\n    if (typeof text === 'string') {\n      textToCopy = text;\n    } else if (\n      // context: https://github.com/hashicorp/design-system/pull/1564\n      typeof text === 'number' ||\n      typeof text === 'bigint'\n    ) {\n      textToCopy = text.toString();\n    } else {\n      assert(\n        `\\`hds-clipboard\\` modifier - \\`text\\` argument must be a string - provided: ${typeof text}`\n      );\n    }\n  }\n  return textToCopy;\n};\n\nexport const getTargetElement = (target) => {\n  let targetElement;\n  if (typeof target === 'string') {\n    targetElement = document.querySelector(target);\n\n    if (!targetElement) {\n      console.error(\n        '`hds-clipboard` modifier - `target` selector provided does not point to an existing DOM node, check your selector string',\n        targetElement\n      );\n      return;\n    }\n  } else if (target instanceof Node && target.nodeType === Node.ELEMENT_NODE) {\n    targetElement = target;\n  } else {\n    if (target instanceof NodeList) {\n      assert(\n        '`hds-clipboard` modifier - `target` argument must be a string or a DOM node - provided: a list of DOM nodes'\n      );\n    } else {\n      assert(\n        `\\`hds-clipboard\\` modifier - \\`target\\` argument must be a string or a DOM node - provided: ${typeof target}`\n      );\n    }\n  }\n  return targetElement;\n};\n\nexport const getTextToCopyFromTargetElement = (targetElement) => {\n  let textToCopy;\n  if (\n    targetElement instanceof Node &&\n    targetElement.nodeType === Node.ELEMENT_NODE\n  ) {\n    if (\n      targetElement instanceof HTMLInputElement || // targetElement.nodeName === 'INPUT' ||\n      targetElement instanceof HTMLTextAreaElement || // targetElement.nodeName === 'TEXTAREA' ||\n      targetElement instanceof HTMLSelectElement // targetElement.nodeName === 'SELECT'\n    ) {\n      textToCopy = targetElement.value;\n    } else {\n      // simplest approach\n      textToCopy = targetElement.innerText;\n\n      // approach based on text selection (left for backup just in case)\n      // var selection = window.getSelection();\n      // var range = document.createRange();\n      // selection.removeAllRanges();\n      // range.selectNodeContents(targetElement);\n      // selection.addRange(range);\n      // textToCopy = selection.toString();\n      // selection.removeAllRanges();\n    }\n  }\n  return textToCopy;\n};\n\nexport const writeTextToClipboard = async (textToCopy) => {\n  // finally copy the text to the clipboard using the Clipboard API\n  // https://developer.mozilla.org/en-US/docs/Web/API/Clipboard_API\n  if (textToCopy) {\n    try {\n      // notice: the \"clipboard-write\" permission is granted automatically to pages when they are in the active tab\n      // https://developer.mozilla.org/en-US/docs/Web/API/Clipboard/write\n      await navigator.clipboard.writeText(textToCopy);\n      // DEBUG uncomment this for easy debugging\n      // console.log('success', textToCopy);\n      return true;\n    } catch (error) {\n      // clipboard write failed\n      // this probably never happens (see comment above) or happens only for very old browsers that don't for which `navigator.clipboard` is undefined\n      warn('copy action failed, please check your browserâ€˜s permissions', {\n        id: 'hds-clipboard.write-text-to-clipboard.catch-error',\n      });\n      return false;\n    }\n  } else {\n    return false;\n  }\n};\n\nexport const copyToClipboard = async (text, target) => {\n  let textToCopy;\n\n  if (text) {\n    textToCopy = getTextToCopy(text);\n  } else if (target) {\n    const targetElement = getTargetElement(target);\n    textToCopy = getTextToCopyFromTargetElement(targetElement);\n  } else {\n    assert(\n      '`hds-clipboard` modifier - either a `text` or a `target` argument is required'\n    );\n  }\n  const success = await writeTextToClipboard(textToCopy);\n  return success;\n};\n\n// Notice: we use a function-based modifier here instead of a class-based one\n// because it's quite simple in its logic, and doesn't require injecting services\n// see: https://github.com/ember-modifier/ember-modifier#function-based-modifiers\n\nexport default modifier((element, positional, named) => {\n  assert(\n    '`hds-clipboard` modifier - the modifier must be applied to an element',\n    element\n  );\n\n  const { text, target, onSuccess, onError } = named;\n\n  const onClick = async (event) => {\n    const trigger = event.currentTarget;\n    const success = await copyToClipboard(text, target);\n\n    // fire the `onSuccess/onError` callbacks (if provided)\n    if (success) {\n      if (typeof onSuccess === 'function') {\n        onSuccess({ trigger, text, target });\n      }\n    } else {\n      if (typeof onError === 'function') {\n        onError({ trigger, text, target });\n      }\n    }\n  };\n\n  // add the \"onClick\" event listener to the element\n  element.addEventListener('click', onClick);\n\n  // this (teardown) function is run when the element is removed\n  return () => {\n    element.removeEventListener('click', onClick);\n  };\n});\n"],"names":["getTextToCopy","text","textToCopy","toString","assert","getTargetElement","target","targetElement","document","querySelector","console","error","Node","nodeType","ELEMENT_NODE","NodeList","getTextToCopyFromTargetElement","HTMLInputElement","HTMLTextAreaElement","HTMLSelectElement","value","innerText","writeTextToClipboard","navigator","clipboard","writeText","warn","id","copyToClipboard","success","modifier","element","positional","named","onSuccess","onError","onClick","event","trigger","currentTarget","addEventListener","removeEventListener"],"mappings":"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"}