{"version":3,"file":"index.js","sources":["../../../../src/components/hds/badge/index.hbs","../../../../src/components/hds/badge/index.js"],"sourcesContent":["import { precompileTemplate } from \"@ember/template-compilation\";\nexport default precompileTemplate(\"{{!\\n  Copyright (c) HashiCorp, Inc.\\n  SPDX-License-Identifier: MPL-2.0\\n}}\\n<div class={{this.classNames}} ...attributes>\\n  {{#if @icon}}\\n    <div class=\\\"hds-badge__icon\\\">\\n      <FlightIcon @name={{this.icon}} @size=\\\"16\\\" @stretched={{true}} />\\n    </div>\\n  {{/if}}\\n  {{#if this.isIconOnly}}\\n    <span class=\\\"sr-only\\\">{{this.text}}</span>\\n  {{else}}\\n    <div class=\\\"hds-badge__text\\\">\\n      {{this.text}}\\n    </div>\\n  {{/if}}\\n</div>\")","/**\n * Copyright (c) HashiCorp, Inc.\n * SPDX-License-Identifier: MPL-2.0\n */\n\nimport Component from '@glimmer/component';\nimport { assert } from '@ember/debug';\n\nexport const DEFAULT_SIZE = 'medium';\nexport const DEFAULT_TYPE = 'filled';\nexport const DEFAULT_COLOR = 'neutral';\nexport const SIZES = ['small', 'medium', 'large'];\nexport const TYPES = ['filled', 'inverted', 'outlined'];\nexport const COLORS = [\n  'neutral',\n  'neutral-dark-mode',\n  'highlight',\n  'success',\n  'warning',\n  'critical',\n];\n\nexport default class HdsBadgeIndexComponent extends Component {\n  /**\n   * Sets the size for the component\n   * Accepted values: small, medium, large\n   *\n   * @param size\n   * @type {string}\n   * @default 'medium'\n   */\n  get size() {\n    let { size = DEFAULT_SIZE } = this.args;\n\n    assert(\n      `@size for \"Hds::Badge\" must be one of the following: ${SIZES.join(\n        ', '\n      )}; received: ${size}`,\n      SIZES.includes(size)\n    );\n\n    return size;\n  }\n\n  /**\n   * Sets the type of the component\n   * Accepted values: filled, inverted, outlined\n   *\n   * @param type\n   * @type {string}\n   * @default 'filled'\n   */\n  get type() {\n    let { type = DEFAULT_TYPE } = this.args;\n\n    assert(\n      `@type for \"Hds::Badge\" must be one of the following: ${TYPES.join(\n        ', '\n      )}; received: ${type}`,\n      TYPES.includes(type)\n    );\n\n    return type;\n  }\n\n  /**\n   * Sets the color scheme for the component\n   * Accepted values: neutral, neutral-dark-mode, highlight, success, warning, critical\n   *\n   * @param color\n   * @type {string}\n   * @default 'neutral'\n   */\n  get color() {\n    let { color = DEFAULT_COLOR } = this.args;\n\n    assert(\n      `@color for \"Hds::Badge\" must be one of the following: ${COLORS.join(\n        ', '\n      )}; received: ${color}`,\n      COLORS.includes(color)\n    );\n\n    return color;\n  }\n\n  /**\n   * @param text\n   * @type {string}\n   * @description The text of the badge. If `isIconOnly` is set to `true`, the text will be visually hidden but still available to assistive technology. If no text value is defined, an error will be thrown.\n   */\n  get text() {\n    let { text } = this.args;\n\n    assert(\n      '@text for \"Hds::Badge\" must have a valid value',\n      text !== undefined\n    );\n\n    return text;\n  }\n\n  /**\n   * Sets the icon name if there is one\n   *\n   * @param icon\n   * @type {string|null}\n   * @default null\n   */\n  get icon() {\n    return this.args.icon ?? null;\n  }\n\n  /**\n   * @param isIconOnly\n   * @type {boolean}\n   * @default false\n   * @description Indicates if the badge will only contain an icon; component will also ensure that accessible text is still applied to the component.\n   */\n  get isIconOnly() {\n    if (this.icon) {\n      return this.args.isIconOnly ?? false;\n    }\n    return false;\n  }\n\n  /**\n   * Get the class names to apply to the component.\n   * @method Badge#classNames\n   * @return {string} The \"class\" attribute to apply to the component.\n   */\n  get classNames() {\n    let classes = ['hds-badge'];\n\n    // add a class based on the @size argument\n    classes.push(`hds-badge--size-${this.size}`);\n\n    // add a class based on the @type argument\n    classes.push(`hds-badge--type-${this.type}`);\n\n    // add a class based on the @color argument\n    classes.push(`hds-badge--color-${this.color}`);\n\n    return classes.join(' ');\n  }\n}\n"],"names":["DEFAULT_SIZE","DEFAULT_TYPE","DEFAULT_COLOR","SIZES","TYPES","COLORS","HdsBadgeIndexComponent","Component","size","args","assert","join","includes","type","color","text","undefined","icon","isIconOnly","classNames","classes","push","setComponentTemplate","TEMPLATE"],"mappings":"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"}