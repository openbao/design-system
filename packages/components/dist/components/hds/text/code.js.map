{"version":3,"file":"code.js","sources":["../../../../src/components/hds/text/code.hbs","../../../../src/components/hds/text/code.js"],"sourcesContent":["import { precompileTemplate } from \"@ember/template-compilation\";\nexport default precompileTemplate(\"{{!\\n  Copyright (c) HashiCorp, Inc.\\n  SPDX-License-Identifier: MPL-2.0\\n}}\\n<Hds::Text\\n  @group=\\\"code\\\"\\n  @size={{this.size}}\\n  @weight={{this.weight}}\\n  @align={{@align}}\\n  @color={{@color}}\\n  @tag={{@tag}}\\n  ...attributes\\n>{{yield}}</Hds::Text>\")","/**\n * Copyright (c) HashiCorp, Inc.\n * SPDX-License-Identifier: MPL-2.0\n */\n\nimport Component from '@glimmer/component';\nimport { assert } from '@ember/debug';\n\n// notice: only some combinations of size + font-weight are allowed (per design specs)\n// see: https://www.figma.com/file/oQsMzMMnynfPWpMEt91OpH/HDS-Product---Foundations?node-id=1262%3A9192\n\nexport const DEFAULT_SIZE = '200';\nexport const AVAILABLE_SIZES = [300, 200, 100];\n\nexport const DEFAULT_WEIGHT = 'regular';\nexport const AVAILABLE_WEIGHTS_PER_SIZE = {\n  300: ['regular', 'bold'],\n  200: ['regular', 'bold'],\n  100: ['regular', 'bold'],\n};\n\nexport default class HdsTextCodeComponent extends Component {\n  /**\n   * Sets the \"size\" for the text\n   * Accepted values: see AVAILABLE_SIZES\n   *\n   * @type {string}\n   *\n   * @param size\n   */\n  get size() {\n    let { size = DEFAULT_SIZE } = this.args;\n\n    // let's be a bit forgiving with the consumers\n    if (typeof size === 'string') {\n      size = parseInt(size, 10);\n    }\n\n    assert(\n      `@size for \"Hds::Text::Code\" must be one of the following: ${AVAILABLE_SIZES.join(\n        ', '\n      )}; received: ${size}`,\n      AVAILABLE_SIZES.includes(size)\n    );\n\n    return size;\n  }\n\n  /**\n   * Sets the \"weight\" for the text\n   * Accepted values: see AVAILABLE_WEIGHTS_PER_SIZE\n   *\n   * @type {string}\n   *\n   * @param variant\n   */\n  get weight() {\n    let { weight = DEFAULT_WEIGHT } = this.args;\n\n    const availableWeights = AVAILABLE_WEIGHTS_PER_SIZE[this.size];\n\n    assert(\n      `@weight for \"Hds::Text::Code\" with @size=${\n        this.size\n      } must be one of the following: ${availableWeights.join(\n        ', '\n      )}; received: ${weight}`,\n      availableWeights.includes(weight)\n    );\n\n    return weight;\n  }\n}\n"],"names":["DEFAULT_SIZE","AVAILABLE_SIZES","DEFAULT_WEIGHT","AVAILABLE_WEIGHTS_PER_SIZE","HdsTextCodeComponent","Component","size","args","parseInt","assert","join","includes","weight","availableWeights","setComponentTemplate","TEMPLATE"],"mappings":";;;;;AACA,eAAe,kBAAkB,CAAC,mQAAmQ;;ACDrS;AACA;AACA;AACA;;AAQO,MAAMA,YAAY,GAAG,MAAK;AAC1B,MAAMC,eAAe,GAAG,CAAC,GAAG,EAAE,GAAG,EAAE,GAAG,EAAC;AAEvC,MAAMC,cAAc,GAAG,UAAS;AAChC,MAAMC,0BAA0B,GAAG;AACxC,EAAA,GAAG,EAAE,CAAC,SAAS,EAAE,MAAM,CAAC;AACxB,EAAA,GAAG,EAAE,CAAC,SAAS,EAAE,MAAM,CAAC;AACxB,EAAA,GAAG,EAAE,CAAC,SAAS,EAAE,MAAM,CAAA;AACzB,EAAC;AAEc,MAAMC,oBAAoB,SAASC,SAAS,CAAC;AAC1D;AACF;AACA;AACA;AACA;AACA;AACA;AACA;EACE,IAAIC,IAAIA,GAAG;IACT,IAAI;AAAEA,MAAAA,IAAI,GAAGN,YAAAA;KAAc,GAAG,IAAI,CAACO,IAAI,CAAA;;AAEvC;AACA,IAAA,IAAI,OAAOD,IAAI,KAAK,QAAQ,EAAE;AAC5BA,MAAAA,IAAI,GAAGE,QAAQ,CAACF,IAAI,EAAE,EAAE,CAAC,CAAA;AAC3B,KAAA;AAEAG,IAAAA,MAAM,CACH,CAA4DR,0DAAAA,EAAAA,eAAe,CAACS,IAAI,CAC/E,IACF,CAAE,CAAA,YAAA,EAAcJ,IAAK,CAAA,CAAC,EACtBL,eAAe,CAACU,QAAQ,CAACL,IAAI,CAC/B,CAAC,CAAA;AAED,IAAA,OAAOA,IAAI,CAAA;AACb,GAAA;;AAEA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;EACE,IAAIM,MAAMA,GAAG;IACX,IAAI;AAAEA,MAAAA,MAAM,GAAGV,cAAAA;KAAgB,GAAG,IAAI,CAACK,IAAI,CAAA;AAE3C,IAAA,MAAMM,gBAAgB,GAAGV,0BAA0B,CAAC,IAAI,CAACG,IAAI,CAAC,CAAA;IAE9DG,MAAM,CACH,4CACC,IAAI,CAACH,IACN,CAAiCO,+BAAAA,EAAAA,gBAAgB,CAACH,IAAI,CACrD,IACF,CAAE,CAAcE,YAAAA,EAAAA,MAAO,EAAC,EACxBC,gBAAgB,CAACF,QAAQ,CAACC,MAAM,CAClC,CAAC,CAAA;AAED,IAAA,OAAOA,MAAM,CAAA;AACf,GAAA;AACF,CAAA;AAACE,oBAAA,CAAAC,QAAA,EAnDoBX,oBAAoB,CAAA;;;;"}