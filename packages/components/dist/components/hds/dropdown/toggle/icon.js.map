{"version":3,"file":"icon.js","sources":["../../../../../src/components/hds/dropdown/toggle/icon.hbs","../../../../../src/components/hds/dropdown/toggle/icon.js"],"sourcesContent":["import { precompileTemplate } from \"@ember/template-compilation\";\nexport default precompileTemplate(\"{{!\\n  Copyright (c) HashiCorp, Inc.\\n  SPDX-License-Identifier: MPL-2.0\\n}}\\n<button\\n  class={{this.classNames}}\\n  aria-label={{this.text}}\\n  ...attributes\\n  aria-expanded={{if @isOpen \\\"true\\\" \\\"false\\\"}}\\n  {{on \\\"click\\\" this.onClick}}\\n  type=\\\"button\\\"\\n>\\n  <div class=\\\"hds-dropdown-toggle-icon__wrapper\\\">\\n    {{#if @imageSrc}}\\n      <img src={{@imageSrc}} alt=\\\"\\\" role=\\\"presentation\\\" height=\\\"32\\\" width=\\\"32\\\" />\\n    {{else if @icon}}\\n      <FlightIcon @name={{@icon}} @size={{this.iconSize}} />\\n    {{/if}}\\n  </div>\\n  {{#if this.hasChevron}}\\n    <Hds::Dropdown::Toggle::Chevron />\\n  {{/if}}\\n</button>\")","/**\n * Copyright (c) HashiCorp, Inc.\n * SPDX-License-Identifier: MPL-2.0\n */\n\nimport Component from '@glimmer/component';\nimport { assert } from '@ember/debug';\n\nexport const DEFAULT_SIZE = 'medium';\nexport const SIZES = ['small', 'medium'];\n\nconst NOOP = () => {};\n\nexport default class HdsDropdownToggleIconComponent extends Component {\n  constructor() {\n    super(...arguments);\n    if (!(this.args.icon || this.args.imageSrc)) {\n      assert(\n        '@icon or @imageSrc must be defined for \"Hds::Dropdown::Toggle::Icon\"'\n      );\n    }\n  }\n\n  /**\n   * @param text\n   * @type {string}\n   * @description The text of the `aria-label` applied to the toggle\n   */\n  get text() {\n    let { text } = this.args;\n\n    assert(\n      '@text for \"Hds::Dropdown::Toggle::Icon\" must have a valid value',\n      text !== undefined\n    );\n\n    return text;\n  }\n\n  /**\n   * @param size\n   * @type {string}\n   * @default medium\n   * @description The size of the button; acceptable values are `small` and `medium`\n   */\n  get size() {\n    let { size = DEFAULT_SIZE } = this.args;\n\n    assert(\n      `@size for \"Hds::Dropdown::Toggle::Icon\" must be one of the following: ${SIZES.join(\n        ', '\n      )}; received: ${size}`,\n      SIZES.includes(size)\n    );\n\n    return size;\n  }\n\n  /**\n   * @param iconSize\n   * @type {string}\n   * @default 24\n   * @description ensures that the correct icon size is used\n   */\n  get iconSize() {\n    if (this.args.size === 'small') {\n      return '16';\n    } else {\n      return '24';\n    }\n  }\n\n  /**\n   * Indicates if a dropdown chevron icon should be displayed; should be displayed unless the \"more-horizontal\" icon is used.\n   *\n   * @param hasChevron\n   * @type {boolean}\n   * @default true\n   */\n  get hasChevron() {\n    return this.args.hasChevron ?? true;\n  }\n\n  /**\n   * @param onClick\n   * @type {function}\n   * @default () => {}\n   */\n  get onClick() {\n    let { onClick } = this.args;\n\n    // notice: this is a guard used in case the toggle is used as standalone element (eg. in the showcase)\n    // in reality it's always used inside the Dropdown main component as yielded component, so the onClick handler is always defined\n    if (typeof onClick === 'function') {\n      return onClick;\n    } else {\n      return NOOP;\n    }\n  }\n\n  /**\n   * Get the class names to apply to the component.\n   * @method ToggleIcon#classNames\n   * @return {string} The \"class\" attribute to apply to the component.\n   */\n  get classNames() {\n    let classes = ['hds-dropdown-toggle-icon'];\n\n    // add a class based on the @size argument\n    classes.push(`hds-dropdown-toggle-icon--size-${this.size}`);\n\n    // add a class based on the @isOpen argument\n    if (this.args.isOpen) {\n      classes.push('hds-dropdown-toggle-icon--is-open');\n    }\n\n    return classes.join(' ');\n  }\n}\n"],"names":["DEFAULT_SIZE","SIZES","NOOP","HdsDropdownToggleIconComponent","Component","constructor","arguments","args","icon","imageSrc","assert","text","undefined","size","join","includes","iconSize","hasChevron","onClick","classNames","classes","push","isOpen","setComponentTemplate","TEMPLATE"],"mappings":";;;;;AACA,eAAe,kBAAkB,CAAC,unBAAunB;;ACDzpB;AACA;AACA;AACA;;AAKO,MAAMA,YAAY,GAAG,SAAQ;MACvBC,KAAK,GAAG,CAAC,OAAO,EAAE,QAAQ,EAAC;AAExC,MAAMC,IAAI,GAAGA,MAAM,EAAE,CAAA;AAEN,MAAMC,8BAA8B,SAASC,SAAS,CAAC;AACpEC,EAAAA,WAAWA,GAAG;IACZ,KAAK,CAAC,GAAGC,SAAS,CAAC,CAAA;AACnB,IAAA,IAAI,EAAE,IAAI,CAACC,IAAI,CAACC,IAAI,IAAI,IAAI,CAACD,IAAI,CAACE,QAAQ,CAAC,EAAE;MAC3CC,MAAM,CACJ,sEACF,CAAC,CAAA;AACH,KAAA;AACF,GAAA;;AAEA;AACF;AACA;AACA;AACA;EACE,IAAIC,IAAIA,GAAG;IACT,IAAI;AAAEA,MAAAA,IAAAA;KAAM,GAAG,IAAI,CAACJ,IAAI,CAAA;AAExBG,IAAAA,MAAM,CACJ,iEAAiE,EACjEC,IAAI,KAAKC,SACX,CAAC,CAAA;AAED,IAAA,OAAOD,IAAI,CAAA;AACb,GAAA;;AAEA;AACF;AACA;AACA;AACA;AACA;EACE,IAAIE,IAAIA,GAAG;IACT,IAAI;AAAEA,MAAAA,IAAI,GAAGb,YAAAA;KAAc,GAAG,IAAI,CAACO,IAAI,CAAA;AAEvCG,IAAAA,MAAM,CACH,CAAwET,sEAAAA,EAAAA,KAAK,CAACa,IAAI,CACjF,IACF,CAAE,CAAA,YAAA,EAAcD,IAAK,CAAA,CAAC,EACtBZ,KAAK,CAACc,QAAQ,CAACF,IAAI,CACrB,CAAC,CAAA;AAED,IAAA,OAAOA,IAAI,CAAA;AACb,GAAA;;AAEA;AACF;AACA;AACA;AACA;AACA;EACE,IAAIG,QAAQA,GAAG;AACb,IAAA,IAAI,IAAI,CAACT,IAAI,CAACM,IAAI,KAAK,OAAO,EAAE;AAC9B,MAAA,OAAO,IAAI,CAAA;AACb,KAAC,MAAM;AACL,MAAA,OAAO,IAAI,CAAA;AACb,KAAA;AACF,GAAA;;AAEA;AACF;AACA;AACA;AACA;AACA;AACA;EACE,IAAII,UAAUA,GAAG;AACf,IAAA,OAAO,IAAI,CAACV,IAAI,CAACU,UAAU,IAAI,IAAI,CAAA;AACrC,GAAA;;AAEA;AACF;AACA;AACA;AACA;EACE,IAAIC,OAAOA,GAAG;IACZ,IAAI;AAAEA,MAAAA,OAAAA;KAAS,GAAG,IAAI,CAACX,IAAI,CAAA;;AAE3B;AACA;AACA,IAAA,IAAI,OAAOW,OAAO,KAAK,UAAU,EAAE;AACjC,MAAA,OAAOA,OAAO,CAAA;AAChB,KAAC,MAAM;AACL,MAAA,OAAOhB,IAAI,CAAA;AACb,KAAA;AACF,GAAA;;AAEA;AACF;AACA;AACA;AACA;EACE,IAAIiB,UAAUA,GAAG;AACf,IAAA,IAAIC,OAAO,GAAG,CAAC,0BAA0B,CAAC,CAAA;;AAE1C;IACAA,OAAO,CAACC,IAAI,CAAE,CAAA,+BAAA,EAAiC,IAAI,CAACR,IAAK,EAAC,CAAC,CAAA;;AAE3D;AACA,IAAA,IAAI,IAAI,CAACN,IAAI,CAACe,MAAM,EAAE;AACpBF,MAAAA,OAAO,CAACC,IAAI,CAAC,mCAAmC,CAAC,CAAA;AACnD,KAAA;AAEA,IAAA,OAAOD,OAAO,CAACN,IAAI,CAAC,GAAG,CAAC,CAAA;AAC1B,GAAA;AACF,CAAA;AAACS,oBAAA,CAAAC,QAAA,EAzGoBrB,8BAA8B,CAAA;;;;"}