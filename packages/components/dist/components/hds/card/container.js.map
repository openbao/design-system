{"version":3,"file":"container.js","sources":["../../../../src/components/hds/card/container.hbs","../../../../src/components/hds/card/container.js"],"sourcesContent":["import { precompileTemplate } from \"@ember/template-compilation\";\nexport default precompileTemplate(\"{{!\\n  Copyright (c) HashiCorp, Inc.\\n  SPDX-License-Identifier: MPL-2.0\\n}}\\n<div class={{this.classNames}} ...attributes>\\n  {{yield}}\\n</div>\")","/**\n * Copyright (c) HashiCorp, Inc.\n * SPDX-License-Identifier: MPL-2.0\n */\n\nimport Component from '@glimmer/component';\nimport { assert } from '@ember/debug';\n\nexport const DEFAULT_LEVEL = 'base';\nexport const DEFAULT_BACKGROUND = 'neutral-primary';\nexport const DEFAULT_OVERFLOW = 'visible';\nexport const LEVELS = ['base', 'mid', 'high'];\nexport const BACKGROUNDS = ['neutral-primary', 'neutral-secondary'];\nexport const OVERFLOWS = ['hidden', 'visible'];\n\nexport default class HdsCardContainerComponent extends Component {\n  /**\n   * Sets the \"elevation\" level for the component\n   * Accepted values: base, mid, high\n   *\n   * @param level\n   * @type {string}\n   * @default 'base'\n   */\n  get level() {\n    let { level = DEFAULT_LEVEL } = this.args;\n\n    assert(\n      `@level for \"Hds::Card::Container\" must be one of the following: ${LEVELS.join(\n        ', '\n      )}; received: ${level}`,\n      LEVELS.includes(level)\n    );\n\n    return level;\n  }\n\n  /**\n   * Sets the \"elevation\" level for the component on \":hover\" state\n   * Accepted values: base, mid, high\n   *\n   * @param levelHover\n   * @type {string}\n   */\n  get levelHover() {\n    let { levelHover } = this.args;\n\n    if (levelHover) {\n      assert(\n        `@levelHover for \"Hds::Card::Container\" must be one of the following: ${LEVELS.join(\n          ', '\n        )}; received: ${levelHover}`,\n        LEVELS.includes(levelHover)\n      );\n    }\n\n    return levelHover;\n  }\n\n  /**\n   * Sets the \"elevation\" level for the component on \":active\" state\n   * Accepted values: base, mid, high\n   *\n   * @param levelActive\n   * @type {string}\n   */\n  get levelActive() {\n    let { levelActive } = this.args;\n\n    if (levelActive) {\n      assert(\n        `@levelActive for \"Hds::Card::Container\" must be one of the following: ${LEVELS.join(\n          ', '\n        )}; received: ${levelActive}`,\n        LEVELS.includes(levelActive)\n      );\n    }\n\n    return levelActive;\n  }\n\n  /**\n   * Sets the background for the component\n   * Accepted values: neutral-primary, neutral-secondary\n   *\n   * @param background\n   * @type {string}\n   * @default 'base'\n   */\n  get background() {\n    let { background = DEFAULT_BACKGROUND } = this.args;\n\n    assert(\n      `@background for \"Hds::Card::Container\" must be one of the following: ${BACKGROUNDS.join(\n        ', '\n      )}; received: ${background}`,\n      BACKGROUNDS.includes(background)\n    );\n\n    return background;\n  }\n\n  /**\n   * Sets the level for the card\n   * Accepted values: visible, hidden\n   *\n   * @param overflow\n   * @type {string}\n   * @default 'visible'\n   */\n  get overflow() {\n    let { overflow = DEFAULT_OVERFLOW } = this.args;\n\n    assert(\n      `@overflow for \"Hds::Card::Container\" must be one of the following: ${OVERFLOWS.join(\n        ', '\n      )}; received: ${overflow}`,\n      OVERFLOWS.includes(overflow)\n    );\n\n    return overflow;\n  }\n\n  /**\n   * Get the class names to apply to the component.\n   * @method Card#classNames\n   * @return {string} The \"class\" attribute to apply to the component.\n   */\n  get classNames() {\n    let classes = ['hds-card__container'];\n\n    // add \"elevation\" classes based on the @level and @hasBorder arguments\n    classes.push(\n      `hds-card__container--level-${\n        this.args.hasBorder ? 'surface' : 'elevation'\n      }-${this.level}`\n    );\n    if (this.levelHover) {\n      classes.push(\n        `hds-card__container--hover-level-${\n          this.args.hasBorder ? 'surface' : 'elevation'\n        }-${this.levelHover}`\n      );\n    }\n    if (this.levelActive) {\n      classes.push(\n        `hds-card__container--active-level-${\n          this.args.hasBorder ? 'surface' : 'elevation'\n        }-${this.levelActive}`\n      );\n    }\n\n    // add a class based on the @background argument\n    classes.push(`hds-card__container--background-${this.background}`);\n\n    // add a class based on the @overflow argument\n    classes.push(`hds-card__container--overflow-${this.overflow}`);\n\n    return classes.join(' ');\n  }\n}\n"],"names":["DEFAULT_LEVEL","DEFAULT_BACKGROUND","DEFAULT_OVERFLOW","LEVELS","BACKGROUNDS","OVERFLOWS","HdsCardContainerComponent","Component","level","args","assert","join","includes","levelHover","levelActive","background","overflow","classNames","classes","push","hasBorder","setComponentTemplate","TEMPLATE"],"mappings":"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"}