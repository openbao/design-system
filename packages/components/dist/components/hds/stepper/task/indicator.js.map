{"version":3,"file":"indicator.js","sources":["../../../../../src/components/hds/stepper/task/indicator.hbs","../../../../../src/components/hds/stepper/task/indicator.js"],"sourcesContent":["import { precompileTemplate } from \"@ember/template-compilation\";\nexport default precompileTemplate(\"{{!\\n  Copyright (c) HashiCorp, Inc.\\n  SPDX-License-Identifier: MPL-2.0\\n}}\\n<div class={{this.classNames}} ...attributes>\\n  <FlightIcon class=\\\"hds-stepper-indicator-task__icon\\\" @name={{this.iconName}} @size=\\\"16\\\" />\\n</div>\")","/**\n * Copyright (c) HashiCorp, Inc.\n * SPDX-License-Identifier: MPL-2.0\n */\n\nimport Component from '@glimmer/component';\nimport { assert } from '@ember/debug';\n\nexport const DEFAULT_STATUS = 'incomplete';\nexport const STATUSES = ['incomplete', 'progress', 'processing', 'complete'];\nexport const MAPPING_STATUS_TO_ICONS = {\n  incomplete: 'circle',\n  progress: 'circle-half',\n  processing: 'loading',\n  complete: 'check-circle',\n};\n\nexport default class HdsStepperIndicatorTaskIndexComponent extends Component {\n  /**\n   * @param status\n   * @type {string}\n   * @default \"incomplete\"\n   */\n\n  get status() {\n    let { status = DEFAULT_STATUS } = this.args;\n\n    assert(\n      `@status for \"Hds::Stepper::Task::Indicator\" must be one of the following: ${STATUSES.join(\n        ', '\n      )}; received: ${status}`,\n      STATUSES.includes(status)\n    );\n\n    return status;\n  }\n\n  /**\n   * @param isInteractive\n   * @type {boolean}\n   * @default false\n   */\n\n  get isInteractive() {\n    return this.args.isInteractive || false;\n  }\n\n  /**\n   * @param iconName\n   * @type {string}\n   */\n\n  get iconName() {\n    return MAPPING_STATUS_TO_ICONS[this.status];\n  }\n\n  /**\n   * Get the class names to apply to the component.\n   * @method IndicatorTask#classNames\n   * @return {string} The \"class\" attribute to apply to the component.\n   */\n  get classNames() {\n    let classes = ['hds-stepper-indicator-task'];\n\n    // Based on the @status arg\n    classes.push(`hds-stepper-indicator-task--status-${this.status}`);\n\n    if (this.isInteractive) {\n      classes.push(`hds-stepper-indicator-task--is-interactive`);\n    }\n\n    return classes.join(' ');\n  }\n}\n"],"names":["DEFAULT_STATUS","STATUSES","MAPPING_STATUS_TO_ICONS","incomplete","progress","processing","complete","HdsStepperIndicatorTaskIndexComponent","Component","status","args","assert","join","includes","isInteractive","iconName","classNames","classes","push","setComponentTemplate","TEMPLATE"],"mappings":";;;;;AACA,eAAe,kBAAkB,CAAC,uOAAuO;;ACDzQ;AACA;AACA;AACA;;AAKO,MAAMA,cAAc,GAAG,aAAY;AACnC,MAAMC,QAAQ,GAAG,CAAC,YAAY,EAAE,UAAU,EAAE,YAAY,EAAE,UAAU,EAAC;AACrE,MAAMC,uBAAuB,GAAG;AACrCC,EAAAA,UAAU,EAAE,QAAQ;AACpBC,EAAAA,QAAQ,EAAE,aAAa;AACvBC,EAAAA,UAAU,EAAE,SAAS;AACrBC,EAAAA,QAAQ,EAAE,cAAA;AACZ,EAAC;AAEc,MAAMC,qCAAqC,SAASC,SAAS,CAAC;AAC3E;AACF;AACA;AACA;AACA;;EAEE,IAAIC,MAAMA,GAAG;IACX,IAAI;AAAEA,MAAAA,MAAM,GAAGT,cAAAA;KAAgB,GAAG,IAAI,CAACU,IAAI,CAAA;AAE3CC,IAAAA,MAAM,CACH,CAA4EV,0EAAAA,EAAAA,QAAQ,CAACW,IAAI,CACxF,IACF,CAAE,CAAA,YAAA,EAAcH,MAAO,CAAA,CAAC,EACxBR,QAAQ,CAACY,QAAQ,CAACJ,MAAM,CAC1B,CAAC,CAAA;AAED,IAAA,OAAOA,MAAM,CAAA;AACf,GAAA;;AAEA;AACF;AACA;AACA;AACA;;EAEE,IAAIK,aAAaA,GAAG;AAClB,IAAA,OAAO,IAAI,CAACJ,IAAI,CAACI,aAAa,IAAI,KAAK,CAAA;AACzC,GAAA;;AAEA;AACF;AACA;AACA;;EAEE,IAAIC,QAAQA,GAAG;AACb,IAAA,OAAOb,uBAAuB,CAAC,IAAI,CAACO,MAAM,CAAC,CAAA;AAC7C,GAAA;;AAEA;AACF;AACA;AACA;AACA;EACE,IAAIO,UAAUA,GAAG;AACf,IAAA,IAAIC,OAAO,GAAG,CAAC,4BAA4B,CAAC,CAAA;;AAE5C;IACAA,OAAO,CAACC,IAAI,CAAE,CAAA,mCAAA,EAAqC,IAAI,CAACT,MAAO,EAAC,CAAC,CAAA;IAEjE,IAAI,IAAI,CAACK,aAAa,EAAE;AACtBG,MAAAA,OAAO,CAACC,IAAI,CAAE,CAAA,0CAAA,CAA2C,CAAC,CAAA;AAC5D,KAAA;AAEA,IAAA,OAAOD,OAAO,CAACL,IAAI,CAAC,GAAG,CAAC,CAAA;AAC1B,GAAA;AACF,CAAA;AAACO,oBAAA,CAAAC,QAAA,EAxDoBb,qCAAqC,CAAA;;;;"}